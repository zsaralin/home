{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saralin\\\\IdeaProjects\\\\website\\\\home\\\\src\\\\components\\\\home\\\\Leadership.jsx\";\nimport React, { useState, useEffect, Profiler } from \"react\";\nimport Carousel from \"react-bootstrap/Carousel\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useCallback } from \"@types/react\";\nimport axios from \"axios\";\n\nconst Leadership = _ref => {\n  let {\n    heading,\n    message\n  } = _ref;\n  const [projectsArray, setProjectsArray] = useState([]);\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI); // slicing to the length\n\n      repoList = [...response.data.slice(0, length)]; // adding specified repos\n\n      try {\n        for (let repoName of specfic) {\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      } // setting projectArray\n      // TODO: remove the duplication.\n\n\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"leadership\",\n    className: \"jumbotron jumbotron-fluid m-0\" // style={{ backgroundColor: \"white\" }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container container-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"display-4 pb-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, heading), /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    id: \"projects\",\n    className: \"bg-light m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"display-4 pb-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, heading), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, projectsArray.length ? projectsArray.map((project, index) => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: `project-card-${index}`,\n    id: `project-card-${index}`,\n    value: project,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 23\n    }\n  })) : dummyProjectsArr.map((project, index) => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: `dummy-${index}`,\n    id: `dummy-${index}`,\n    value: project,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }\n  }))))), \");\"));\n};\n\nexport default Leadership;","map":{"version":3,"sources":["C:/Users/Saralin/IdeaProjects/website/home/src/components/home/Leadership.jsx"],"names":["React","useState","useEffect","Profiler","Carousel","Jumbotron","Container","Row","ProjectCard","useCallback","axios","Leadership","heading","message","projectsArray","setProjectsArray","fetchRepos","repoList","response","get","allReposAPI","data","slice","length","repoName","specfic","specficReposAPI","push","error","console","map","project","index","dummyProjectsArr"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Profiler } from \"react\";\r\nimport Carousel from \"react-bootstrap/Carousel\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport ProjectCard from \"./ProjectCard\";\r\nimport {useCallback} from \"@types/react\";\r\nimport axios from \"axios\";\r\n\r\nconst Leadership = ({ heading, message }) => {\r\n  const [projectsArray, setProjectsArray] = useState([]);\r\n\r\n  const fetchRepos = useCallback(async () => {\r\n    let repoList = [];\r\n    try {\r\n      // getting all repos\r\n      const response = await axios.get(allReposAPI);\r\n      // slicing to the length\r\n      repoList = [...response.data.slice(0, length)];\r\n      // adding specified repos\r\n      try {\r\n        for (let repoName of specfic) {\r\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\r\n          repoList.push(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n      // setting projectArray\r\n      // TODO: remove the duplication.\r\n      setProjectsArray(repoList);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }, [allReposAPI, length, specfic, specficReposAPI]);\r\n\r\n  useEffect(() => {\r\n    fetchRepos();\r\n  }, [fetchRepos]);\r\n\r\n  return (\r\n    <div\r\n      id=\"leadership\"\r\n      className=\"jumbotron jumbotron-fluid m-0\"\r\n      // style={{ backgroundColor: \"white\" }}\r\n    >\r\n      <div className=\"container container-fluid\">\r\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\r\n        <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\r\n          <Container className=\"\">\r\n            <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\r\n            <Row>\r\n              {projectsArray.length\r\n                  ? projectsArray.map((project, index) => (\r\n                      <ProjectCard\r\n                          key={`project-card-${index}`}\r\n                          id={`project-card-${index}`}\r\n                          value={project}\r\n                      />\r\n                  ))\r\n                  : dummyProjectsArr.map((project, index) => (\r\n                      <ProjectCard\r\n                          key={`dummy-${index}`}\r\n                          id={`dummy-${index}`}\r\n                          value={project}\r\n                      />\r\n                  ))}\r\n            </Row>\r\n          </Container>\r\n        </Jumbotron>\r\n        );\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leadership;\r\n"]},"metadata":{},"sourceType":"module"}