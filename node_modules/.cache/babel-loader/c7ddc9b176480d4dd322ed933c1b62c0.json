{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zsara\\\\IdeaProjects\\\\Portfolio\\\\home\\\\src\\\\components\\\\home\\\\Project.jsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null\n};\nconst API = \"https://api.github.com\"; // const gitHubQuery = \"/repos?sort=updated&direction=desc\";\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\n\nconst Project = ({\n  heading,\n  username,\n  length,\n  specfic\n}) => {\n  // const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  // const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(dummyProject);\n  const [projectsArray, setProjectsArray] = useState([]);\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI); // slicing to the length\n\n      repoList = [...response.data.slice(0, length)]; // adding specified repos\n\n      try {\n        for (let repoName of specfic) {\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      } // setting projectArray\n      // TODO: remove the duplication.\n\n\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    id: \"projects\",\n    className: \"bg-light m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"display-4 pb-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, heading), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, projectsArray.length ? projectsArray.map((project, index) => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: `project-card-${index}`,\n    id: `project-card-${index}`,\n    value: project,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  })) : dummyProjectsArr.map((project, index) => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: `dummy-${index}`,\n    id: `dummy-${index}`,\n    value: project,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  })))));\n};\n\nexport default Project;","map":{"version":3,"sources":["C:/Users/zsara/IdeaProjects/Portfolio/home/src/components/home/Project.jsx"],"names":["React","useState","useEffect","useCallback","Container","Jumbotron","Row","ProjectCard","axios","dummyProject","name","description","svn_url","stargazers_count","languages_url","pushed_at","API","Project","heading","username","length","specfic","dummyProjectsArr","Array","fill","projectsArray","setProjectsArray","fetchRepos","repoList","response","get","allReposAPI","data","slice","repoName","specficReposAPI","push","error","console","message","map","project","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport ProjectCard from \"./ProjectCard\";\r\nimport axios from \"axios\";\r\n\r\nconst dummyProject = {\r\n  name: null,\r\n  description: null,\r\n  svn_url: null,\r\n  stargazers_count: null,\r\n  languages_url: null,\r\n  pushed_at: null,\r\n};\r\nconst API = \"https://api.github.com\";\r\n// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\r\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\r\n\r\nconst Project = ({ heading, username, length, specfic }) => {\r\n  // const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\r\n  // const specficReposAPI = `${API}/repos/${username}`;\r\n  const dummyProjectsArr = new Array(length + specfic.length).fill(\r\n    dummyProject\r\n  );\r\n\r\n  const [projectsArray, setProjectsArray] = useState([]);\r\n\r\n  const fetchRepos = useCallback(async () => {\r\n    let repoList = [];\r\n    try {\r\n      // getting all repos\r\n      const response = await axios.get(allReposAPI);\r\n      // slicing to the length\r\n      repoList = [...response.data.slice(0, length)];\r\n      // adding specified repos\r\n      try {\r\n        for (let repoName of specfic) {\r\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\r\n          repoList.push(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n      // setting projectArray\r\n      // TODO: remove the duplication.\r\n      setProjectsArray(repoList);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }, [allReposAPI, length, specfic, specficReposAPI]);\r\n\r\n  useEffect(() => {\r\n    fetchRepos();\r\n  }, [fetchRepos]);\r\n\r\n  return (\r\n    <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\r\n      <Container className=\"\">\r\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\r\n        <Row>\r\n          {projectsArray.length\r\n            ? projectsArray.map((project, index) => (\r\n                <ProjectCard\r\n                  key={`project-card-${index}`}\r\n                  id={`project-card-${index}`}\r\n                  value={project}\r\n                />\r\n              ))\r\n            : dummyProjectsArr.map((project, index) => (\r\n                <ProjectCard\r\n                  key={`dummy-${index}`}\r\n                  id={`dummy-${index}`}\r\n                  value={project}\r\n                />\r\n              ))}\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n"]},"metadata":{},"sourceType":"module"}